# File: clusters/production/timescaledb/backup-cronjob.yaml
# Create sealed secret for S3 credentials:
# kubectl create secret generic s3-backup-credentials \
#   --namespace=timescaledb \
#   --from-literal=AWS_ACCESS_KEY_ID=your-key \
#   --from-literal=AWS_SECRET_ACCESS_KEY=your-secret \
#   --from-literal=S3_BUCKET=your-bucket \
#   --from-literal=S3_REGION=eu-north-1 \
#   --dry-run=client -o yaml | \
#   kubeseal --format=yaml > s3-backup-credentials-sealed.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: timescaledb-s3-backup
  namespace: timescaledb
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM (after logical backup)
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: backup
              image: postgres:16-alpine
              env:
                - name: PGHOST
                  value: "timescaledb-cluster"
                - name: PGPORT
                  value: "5432"
                - name: PGUSER
                  value: "postgres"  # Using superuser for full backup
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres.timescaledb-cluster.credentials.postgresql.acid.zalan.do
                      key: password
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: s3-backup-credentials
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: s3-backup-credentials
                      key: AWS_SECRET_ACCESS_KEY
                - name: S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: s3-backup-credentials
                      key: S3_BUCKET
                - name: S3_REGION
                  valueFrom:
                    secretKeyRef:
                      name: s3-backup-credentials
                      key: S3_REGION
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  
                  # Install AWS CLI
                  apk add --no-cache aws-cli
                  
                  # Set timestamp
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  BACKUP_FILE="timescaledb_full_backup_${TIMESTAMP}.sql.gz"
                  
                  echo "Starting full cluster backup at ${TIMESTAMP}"
                  
                  # Create full cluster backup (all databases)
                  pg_dumpall -c | gzip > /tmp/${BACKUP_FILE}
                  
                  # Upload to S3
                  aws s3 cp /tmp/${BACKUP_FILE} s3://${S3_BUCKET}/timescaledb-backups/${BACKUP_FILE} \
                    --region ${S3_REGION}
                  
                  echo "Backup uploaded: ${BACKUP_FILE}"
                  echo "Backup size: $(du -h /tmp/${BACKUP_FILE} | cut -f1)"
                  
                  # Delete backups older than 30 days from S3
                  echo "Cleaning up old backups..."
                  CUTOFF_DATE=$(date -d '30 days ago' +%Y%m%d 2>/dev/null || date -v-30d +%Y%m%d)
                  aws s3 ls s3://${S3_BUCKET}/timescaledb-backups/ --region ${S3_REGION} | \
                  while read -r line; do
                    BACKUP_DATE=$(echo $line | awk '{print $4}' | grep -oE '[0-9]{8}' | head -n1)
                    BACKUP_NAME=$(echo $line | awk '{print $4}')
                    if [ ! -z "$BACKUP_DATE" ] && [ "$BACKUP_DATE" -lt "$CUTOFF_DATE" ]; then
                      echo "Deleting old backup: ${BACKUP_NAME}"
                      aws s3 rm s3://${S3_BUCKET}/timescaledb-backups/${BACKUP_NAME} --region ${S3_REGION}
                    fi
                  done
                  
                  # Cleanup local file
                  rm /tmp/${BACKUP_FILE}
                  
                  echo "Backup process completed successfully"
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
---