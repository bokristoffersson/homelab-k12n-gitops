apiVersion: batch/v1
kind: CronJob
metadata:
  name: timescaledb-backup
  namespace: heatpump-mqtt
spec:
  # Run daily at 2 AM UTC (adjust to your timezone)
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: timescaledb-backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: backup
              image: postgres:16
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  
                  # Install AWS CLI
                  apt-get update && apt-get install -y awscli && apt-get clean
                  
                  # Environment variables
                  PGHOST=timescaledb.heatpump-mqtt.svc.cluster.local
                  PGPORT=5432
                  PGDATABASE=timescaledb
                  TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                  BACKUP_FILE="heatpump-backup-${TIMESTAMP}.sql.gz"
                  S3_KEY="${S3_PREFIX}${BACKUP_FILE}"
                  
                  echo "Starting backup at $(date)"
                  
                  # Validate environment
                  if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                    echo "ERROR: AWS_ACCESS_KEY_ID not set"
                    exit 1
                  fi
                  if [ -z "$S3_BUCKET" ]; then
                    echo "ERROR: S3_BUCKET not set"
                    exit 1
                  fi
                  
                  # Create backup with compression
                  echo "Creating database backup..."
                  pg_dump -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE \
                    -F p -b \
                    | gzip > /tmp/backup.sql.gz || {
                      echo "ERROR: pg_dump failed"
                      exit 1
                    }
                  
                  echo "Backup created: $(ls -lh /tmp/backup.sql.gz)"
                  
                  # Upload to S3
                  echo "Uploading to S3: s3://${S3_BUCKET}/${S3_KEY}"
                  aws s3 cp /tmp/backup.sql.gz "s3://${S3_BUCKET}/${S3_KEY}" \
                    --region $AWS_REGION || {
                      echo "ERROR: S3 upload failed"
                      exit 1
                    }
                  
                  echo "Upload complete and verified"
                  
                  # List all backups to show what's being kept
                  echo "Current backups in S3:"
                  aws s3 ls "s3://${S3_BUCKET}/${S3_PREFIX}" --region $AWS_REGION || true
                  
                  echo "Backup process completed at $(date)"
                  echo "Note: S3 lifecycle policy handles cleanup of old backups"
              env:
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-secret
                      key: POSTGRES_USER
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-secret
                      key: POSTGRES_PASSWORD
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-backup-aws
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-backup-aws
                      key: AWS_SECRET_ACCESS_KEY
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-backup-aws
                      key: AWS_REGION
                - name: S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-backup-aws
                      key: S3_BUCKET
                - name: S3_PREFIX
                  valueFrom:
                    secretKeyRef:
                      name: timescaledb-backup-aws
                      key: S3_PREFIX
              resources:
                requests:
                  cpu: 100m
                  memory: 256Mi
                limits:
                  cpu: 1000m
                  memory: 1Gi

